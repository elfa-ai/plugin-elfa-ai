{"version":3,"sources":["../src/actions/ping.ts","../src/environment.ts","../src/actions/apiKeyStatus.ts","../src/actions/getSmartMentions.ts","../src/actions/getTopMentions.ts","../src/actions/getSearchMentionsByKeywords.ts","../src/actions/getTrendingTokens.ts","../src/actions/getTwitterAccountStats.ts","../src/index.ts"],"sourcesContent":["import {\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { validateElfaAiConfig } from \"../environment\";\nimport axios from \"axios\";\n\nexport const elfaPingAction: Action = {\n    name: \"ELFA_PING\",\n    similes: [\"ping elfa\", \"elfa health check\", \"check elfa api\"],\n    description: \"Checks the health of the Elfa AI API by pinging it.\",\n    examples: [\n        [\n            {\n                user: \"{{user}}\",\n                content: {\n                    text: \"ping elfa\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Elfa AI API is up and running.\",\n                    action: \"ELFA_PING\",\n                },\n            },\n        ],\n    ],\n    validate: async (runtime: IAgentRuntime) => {\n        await validateElfaAiConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ) => {\n        try {\n            const baseUrl = runtime.getSetting(\"ELFA_AI_BASE_URL\");\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"x-elfa-api-key\": runtime.getSetting(\"ELFA_AI_API_KEY\"),\n            };\n            const response = await axios.get(`${baseUrl}/v1/ping`, { headers });\n            const responseData = response.data;\n            callback?.({\n                text: `Elfa AI API is up and running. Response: ${JSON.stringify(\n                    responseData\n                )}`,\n                action: \"ELFA_PING\",\n            });\n            elizaLogger.info(\"Elfa AI API is up and running\", responseData);\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Failed to ping Elfa AI API\", error);\n            callback?.({\n                text: `Elfa AI API is down. Please check the API status.\nError:\n${error.message}`,\n                action: \"ELFA_PING\",\n            });\n            return false;\n        }\n    },\n};\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const elfaAiEnvSchema = z.object({\n    ELFA_AI_BASE_URL: z.string().min(1, \"Base URL is required for interacting with Elfa AI\"),\n    ELFA_AI_API_KEY: z\n        .string()\n        .min(1, \"API key is required for interacting with Elfa AI\"),\n});\n\nexport type ElfaAiConfig = z.infer<typeof elfaAiEnvSchema>;\n\nexport async function validateElfaAiConfig(\n    runtime: IAgentRuntime\n): Promise<ElfaAiConfig> {\n    try {\n        const config = {\n            ELFA_AI_BASE_URL:\n                runtime.getSetting(\"ELFA_AI_BASE_URL\") ||\n                process.env.ELFA_AI_BASE_URL,\n            ELFA_AI_API_KEY:\n                runtime.getSetting(\"ELFA_AI_API_KEY\") ||\n                process.env.ELFA_AI_API_KEY,\n        };\n        return elfaAiEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Elfa AI configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import {\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { validateElfaAiConfig } from \"../environment\";\nimport axios from \"axios\";\n\nexport const elfaApiKeyStatusAction: Action = {\n    name: \"ELFA_API_KEY_STATUS\",\n    similes: [\"elfa api key status\", \"check api key\", \"api key info\"],\n    description:\n        \"Retrieves the status and usage details of the Elfa AI API key.\",\n    examples: [\n        [\n            {\n                user: \"{{user}}\",\n                content: {\n                    text: \"elfa api key status\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Elfa AI API key status retrieved successfully\",\n                    action: \"ELFA_API_KEY_STATUS\",\n                },\n            },\n        ],\n    ],\n    validate: async (runtime: IAgentRuntime) => {\n        await validateElfaAiConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ) => {\n        try {\n            const baseUrl = runtime.getSetting(\"ELFA_AI_BASE_URL\");\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"x-elfa-api-key\": runtime.getSetting(\"ELFA_AI_API_KEY\"),\n            };\n            const response = await axios.get(`${baseUrl}/v1/key-status`, {\n                headers,\n            });\n            const responseData = response.data;\n            callback?.({\n                text: `Elfa AI API key status. Response: ${JSON.stringify(\n                    responseData\n                )}`,\n                action: \"ELFA_API_KEY_STATUS\",\n            });\n            elizaLogger.info(\"Elfa AI API key status\", responseData);\n            return true;\n        } catch (error) {\n            elizaLogger.error(\n                \"Failed to get api key status from Elfa AI API\",\n                error\n            );\n            callback?.({\n                text: `Failed to get api key status from Elfa AI. Please check the your API key.\nError:\n${error.message}`,\n                action: \"ELFA_API_KEY_STATUS\",\n            });\n            return false;\n        }\n    },\n};\n","import {\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n    type Content,\n    ModelClass,\n    composeContext,\n    generateObject,\n    generateText,\n} from \"@elizaos/core\";\nimport { validateElfaAiConfig } from \"../environment\";\nimport axios from \"axios\";\nimport { z } from \"zod\";\n\nexport const getSmartMentionsSchema = z.object({\n    limit: z.number().optional(),\n    offset: z.number().optional(),\n});\n\nexport interface GetSmartMentionsContent extends Content {\n    limit: number;\n    offset: number;\n}\n\nconst getSmartMentionsTemplate = `Respond with a JSON object containing only the extracted information:\n\nExample response:\n\\`\\`\\`json\n{\n    \"limit\": 100,\n    \"offset\": 0\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested smart mentions:\n- Limit: The number of smart mentions to retrieve.\n- Offset: The offset to start retrieving smart mentions from.\n\nRespond with a JSON object containing only the extracted information\n`;\n\nexport function isGetSmartMentionsContent(\n    content: GetSmartMentionsContent\n): content is GetSmartMentionsContent {\n    return (\n        typeof content.limit === \"number\" && typeof content.offset === \"number\"\n    );\n}\n\nexport const elfaGetSmartMentions: Action = {\n    name: \"ELFA_GET_SMART_MENTIONS\",\n    similes: [\"get mentions\", \"smart mentions\", \"fetch mentions\"],\n    description:\n        \"Retrieves tweets by smart accounts with smart engagement from the Elfa AI API.\",\n    examples: [\n        [\n            {\n                user: \"{{user}}\",\n                content: {\n                    text: \"get smart mentions\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Smart mentions retrieved successfully\",\n                    action: \"ELFA_GET_SMART_MENTIONS\",\n                },\n            },\n        ],\n    ],\n    validate: async (runtime: IAgentRuntime) => {\n        await validateElfaAiConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const baseUrl = runtime.getSetting(\"ELFA_AI_BASE_URL\");\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"x-elfa-api-key\": runtime.getSetting(\"ELFA_AI_API_KEY\"),\n            };\n            let updatedState: State;\n            if (!state) {\n                updatedState = (await runtime.composeState(message)) as State;\n            } else {\n                updatedState = await runtime.updateRecentMessageState(state);\n            }\n\n            const context = composeContext({\n                state: updatedState,\n                template: getSmartMentionsTemplate,\n            });\n\n            const content = (\n                await generateObject({\n                    runtime,\n                    context: context,\n                    modelClass: ModelClass.LARGE,\n                    schema: getSmartMentionsSchema,\n                    schemaName: \"GetSmartMentionsSchema\",\n                    schemaDescription:\n                        \"Schema for getting smart mentions from Elfa AI API\",\n                })\n            ).object as GetSmartMentionsContent;\n\n            if (!isGetSmartMentionsContent(content)) {\n                callback?.({\n                    text: \"Unable to process get smart mentions request. Invalid content provided.\",\n                    content: { error: \"Invalid get smart mentions content\" },\n                });\n                return false;\n            }\n            const { limit = 100, offset = 0 } = content;\n            const response = await axios.get(`${baseUrl}/v1/mentions`, {\n                headers,\n                params: { limit, offset },\n            });\n            const responseData = response.data;\n\n            const prompt = `Extracted information and summarize the smart mentions from the Elfa AI API.:\n            ${JSON.stringify(responseData, null, 2)}`;\n\n            const callbackMessage = await generateText({\n                runtime: runtime,\n                context: prompt,\n                modelClass: ModelClass.LARGE,\n            });\n            callback?.({\n                text: `Retrieves tweets by smart accounts with smart engagement from the Elfa AI API:\n${callbackMessage}\n------------------------------------------------\nRaw Response: \n${JSON.stringify(responseData, null, 2)}`,\n                action: \"ELFA_GET_SMART_MENTIONS\",\n            });\n            return true;\n        } catch (error) {\n            callback?.({\n                text: `Failed to get smart mentions from Elfa AI API.\nError:\n${error.message}`,\n                action: \"ELFA_GET_SMART_MENTIONS\",\n            });\n            return false;\n        }\n    },\n};\n","import {\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n    type Content,\n    ModelClass,\n    composeContext,\n    generateObject,\n    generateText,\n} from \"@elizaos/core\";\nimport { validateElfaAiConfig } from \"../environment\";\nimport axios from \"axios\";\nimport { z } from \"zod\";\n\nexport const getTopMentionsSchema = z.object({\n    ticker: z.string().min(1),\n    timeWindow: z.string().min(2).optional(),\n    page: z.number().optional(),\n    pageSize: z.number().optional(),\n    includeAccountDetails: z.boolean().optional(),\n});\n\nexport interface GetTopMentionsContent extends Content {\n    ticker: string;\n    timeWindow?: string;\n    page?: number;\n    pageSize?: number;\n    includeAccountDetails?: boolean;\n}\n\nconst getTopMentionsTemplate = `Respond with a JSON object containing only the extracted information:\n\nExample response:\n\\`\\`\\`json\n{\n    \"ticker\": \"SOL\",\n    \"timeWindow\": \"1h\",\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"includeAccountDetails\": false\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested top mentions:\n- ticker: symbol to retrieve mentions for.\n- timeWindow: Time window for mentions eg - 1h, 24h, 7d (default: 1h).\n- page: Page number for pagination (default: 1).\n- pageSize: Number of mentions per page (default: 10).\n- includeAccountDetails: Include account details in the response (default: false).\n\nRespond with a JSON object containing only the extracted information\n`;\n\nexport function isGetTopMentionsContent(\n    content: GetTopMentionsContent\n): content is GetTopMentionsContent {\n    return (\n        typeof content.ticker === \"string\" &&\n        (content.timeWindow === undefined ||\n            typeof content.timeWindow === \"string\") &&\n        (content.page === undefined || typeof content.page === \"number\") &&\n        (content.pageSize === undefined ||\n            typeof content.pageSize === \"number\") &&\n        (content.includeAccountDetails === undefined ||\n            typeof content.includeAccountDetails === \"boolean\")\n    );\n}\n\nexport const elfaGetTopMentionsAction: Action = {\n    name: \"ELFA_GET_TOP_MENTIONS\",\n    similes: [\n        \"top mentions\",\n        \"get top mentions\",\n        \"fetch top mentions\",\n        \"get top tweets\",\n    ],\n    description:\n        \"Retrieves top tweets for a given ticker symbol from the Elfa AI API.\",\n    examples: [\n        [\n            {\n                user: \"{{user}}\",\n                content: {\n                    text: \"get top mentions for SOL\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Top mentions for the ticker SOL are retrieved.\",\n                    action: \"ELFA_GET_TOP_MENTIONS\",\n                },\n            },\n        ],\n    ],\n    validate: async (runtime: IAgentRuntime) => {\n        await validateElfaAiConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const baseUrl = runtime.getSetting(\"ELFA_AI_BASE_URL\");\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"x-elfa-api-key\": runtime.getSetting(\"ELFA_AI_API_KEY\"),\n            };\n            let updatedState: State;\n            if (!state) {\n                updatedState = (await runtime.composeState(message)) as State;\n            } else {\n                updatedState = await runtime.updateRecentMessageState(state);\n            }\n\n            const context = composeContext({\n                state: updatedState,\n                template: getTopMentionsTemplate,\n            });\n\n            const content = (\n                await generateObject({\n                    runtime,\n                    context: context,\n                    modelClass: ModelClass.LARGE,\n                    schema: getTopMentionsSchema,\n                    schemaName: \"GetTopMentionsSchema\",\n                    schemaDescription:\n                        \"Schema for getting top mentions for a specific ticker from Elfa AI API\",\n                })\n            ).object as GetTopMentionsContent;\n\n            if (!isGetTopMentionsContent(content)) {\n                callback?.({\n                    text: \"Unable to process get top mentions for the requested ticker. Invalid content provided.\",\n                    content: { error: \"Invalid get top mentions content\" },\n                });\n                return false;\n            }\n            const {\n                ticker,\n                timeWindow = \"1h\",\n                page = 1,\n                pageSize = 10,\n                includeAccountDetails = false,\n            } = content;\n            const response = await axios.get(`${baseUrl}/v1/top-mentions`, {\n                headers,\n                params: {\n                    ticker,\n                    timeWindow,\n                    page,\n                    pageSize,\n                    includeAccountDetails,\n                },\n            });\n            const responseData = response.data;\n\n            const prompt = `Extracted information and summarize the top tweets for a specific ticker from the Elfa AI API. Make sure you mention details of the tweet such as date, post metrics and the tweet content:\n            ${JSON.stringify(responseData, null, 2)}`;\n\n            const callbackMessage = await generateText({\n                runtime: runtime,\n                context: prompt,\n                modelClass: ModelClass.LARGE,\n            });\n            callback?.({\n                text: `Retrieved top tweets for the ${ticker}:\n${callbackMessage}\n------------------------------------------------\nRaw Response: \n${JSON.stringify(responseData, null, 2)}`,\n                action: \"ELFA_GET_TOP_MENTIONS\",\n            });\n            return true;\n        } catch (error) {\n            callback?.({\n                text: `Failed to get top mentions for provided ticker from Elfa AI API.\nError:\n${error.message}`,\n                action: \"ELFA_GET_TOP_MENTIONS\",\n            });\n            return false;\n        }\n    },\n};\n","import {\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n    type Content,\n    ModelClass,\n    composeContext,\n    generateObject,\n    generateText,\n} from \"@elizaos/core\";\nimport { validateElfaAiConfig } from \"../environment\";\nimport axios from \"axios\";\nimport { z } from \"zod\";\n\nexport const getSearchMentionsByKeywordsSchema = z.object({\n    keywords: z.string().min(1),\n    from: z.number(),\n    to: z.number(),\n    limit: z.number().optional(),\n});\n\nexport interface getSearchMentionsByKeywordsContent extends Content {\n    keywords: string;\n    from: number;\n    to: number;\n    limit?: number;\n}\n\nconst getSearchMentionsByKeywordsTemplate = `Respond with a JSON object containing only the extracted information:\n\nExample response:\n\\`\\`\\`json\n{\n    \"keywords\": \"ai agents\",\n    \"from\": 1738675001,\n    \"to\": 1738775001,\n    limit: 20\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested search mentions by keywords:\n- keywords: Keywords to search for, separated by commas.\n- from: Start date as unix timestamp.\n- to: End date as unix timestamp.\n- limit: Number of tweets to retrieve (default: 20).\n\nRespond with a JSON object containing only the extracted information\n`;\n\nexport function isGetSearchMentionsByKeywordsContent(\n    content: getSearchMentionsByKeywordsContent\n): content is getSearchMentionsByKeywordsContent {\n    return (\n        typeof content.keywords === \"string\" &&\n        typeof content.from === \"number\" &&\n        typeof content.to === \"number\" &&\n        (typeof content.limit === \"number\" || content.limit === undefined)\n    );\n}\n\nexport const elfaGetSearchMentionsByKeywordsAction: Action = {\n    name: \"ELFA_SEARCH_MENTIONS_BY_KEYWORDS\",\n    similes: [\n        \"search mentions\",\n        \"find mentions by keywords\",\n        \"tweets by keywords\",\n    ],\n    description:\n        \"Searches for tweets by keywords within a specified date range using the Elfa AI API.\",\n    examples: [\n        [\n            {\n                user: \"{{user}}\",\n                content: {\n                    text: \"search mentions for ai agents between 1738675001 and 1738775001\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Search mentions by keywords completed successfully\",\n                    action: \"ELFA_SEARCH_MENTIONS_BY_KEYWORDS\",\n                },\n            },\n        ],\n    ],\n    validate: async (runtime: IAgentRuntime) => {\n        await validateElfaAiConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const baseUrl = runtime.getSetting(\"ELFA_AI_BASE_URL\");\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"x-elfa-api-key\": runtime.getSetting(\"ELFA_AI_API_KEY\"),\n            };\n            let updatedState: State;\n            if (!state) {\n                updatedState = (await runtime.composeState(message)) as State;\n            } else {\n                updatedState = await runtime.updateRecentMessageState(state);\n            }\n\n            const context = composeContext({\n                state: updatedState,\n                template: getSearchMentionsByKeywordsTemplate,\n            });\n\n            const content = (\n                await generateObject({\n                    runtime,\n                    context: context,\n                    modelClass: ModelClass.LARGE,\n                    schema: getSearchMentionsByKeywordsSchema,\n                    schemaName: \"getSearchMentionsByKeywordsSchema\",\n                    schemaDescription:\n                        \"Schema for searching for tweets by keywords within a specified date range using the Elfa AI API\",\n                })\n            ).object as getSearchMentionsByKeywordsContent;\n\n            if (!isGetSearchMentionsByKeywordsContent(content)) {\n                callback?.({\n                    text: \"Unable to search for tweets by the keywords provided. Invalid content provided.\",\n                    content: {\n                        error: \"Invalid get search mentions by keywords content\",\n                    },\n                });\n                return false;\n            }\n            const { keywords, from, to, limit = 20 } = content;\n            const response = await axios.get(`${baseUrl}/v1/mentions/search`, {\n                headers,\n                params: {\n                    keywords,\n                    from,\n                    to,\n                    limit,\n                },\n            });\n            const responseData = response.data;\n\n            const prompt = `Extracted information and summarize the tweets for keywords from the Elfa AI API. Make sure you mention details of the tweet such as date, post metrics and the tweet content:\n            ${JSON.stringify(responseData, null, 2)}`;\n\n            const callbackMessage = await generateText({\n                runtime: runtime,\n                context: prompt,\n                modelClass: ModelClass.LARGE,\n            });\n            callback?.({\n                text: `Retrieved tweets for the ${keywords} keywords from the Elfa AI API:\n${callbackMessage}\n------------------------------------------------\nRaw Response: \n${JSON.stringify(responseData, null, 2)}`,\n                action: \"ELFA_SEARCH_MENTIONS_BY_KEYWORDS\",\n            });\n            return true;\n        } catch (error) {\n            callback?.({\n                text: `Failed to get tweets for the mentioned keywords from Elfa AI API.\nError:\n${error.message}`,\n                action: \"ELFA_SEARCH_MENTIONS_BY_KEYWORDS\",\n            });\n            return false;\n        }\n    },\n};\n","import {\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n    type Content,\n    ModelClass,\n    composeContext,\n    generateObject,\n    generateText,\n} from \"@elizaos/core\";\nimport { validateElfaAiConfig } from \"../environment\";\nimport axios from \"axios\";\nimport { z } from \"zod\";\n\nexport const getTrendingTokensSchema = z.object({\n    timeWindow: z.string().min(2).optional(),\n    page: z.number().optional(),\n    pageSize: z.number().optional(),\n    minMentions: z.number().optional(),\n});\n\nexport interface GetTrendingTokensContent extends Content {\n    timeWindow?: string;\n    page?: number;\n    pageSize?: number;\n    minMentions?: number;\n}\n\nconst getTrendingTokensTemplate = `Respond with a JSON object containing only the extracted information:\n\nExample response:\n\\`\\`\\`json\n{\n    \"timeWindow\": \"24h\",\n    \"page\": 1,\n    \"pageSize\": 50,\n    \"minMentions\": 5\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the trending tokens:\n- timeWindow: Time window for mentions.\n- page: Page number for pagination.\n- pageSize: Number of tokens per page.\n- minMentions: Minimum number of mentions for a token to be considered trending.\n\nRespond with a JSON object containing only the extracted information\n`;\n\nexport function isGetTrendingTokensContent(\n    content: GetTrendingTokensContent\n): content is GetTrendingTokensContent {\n    return (\n        typeof content.timeWindow === \"string\" ||\n        (typeof content.timeWindow === undefined &&\n            typeof content.page === \"number\") ||\n        (typeof content.page === undefined &&\n            typeof content.pageSize === \"number\") ||\n        (typeof content.pageSize === undefined &&\n            typeof content.minMentions === \"number\") ||\n        typeof content.minMentions === undefined\n    );\n}\n\nexport const elfaGetTrendingTokens: Action = {\n    name: \"ELFA_GET_TRENDING_TOKENS\",\n    similes: [\n        \"trending tokens\",\n        \"get trending tokens\",\n        \"fetch trending tokens\",\n    ],\n    description:\n        \"Retrieves trending tokens based on mentions from the Elfa AI API.\",\n    examples: [\n        [\n            {\n                user: \"{{user}}\",\n                content: {\n                    text: \"get trending tokens\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"ternding tokens retrieved successfully\",\n                    action: \"ELFA_GET_TRENDING_TOKENS\",\n                },\n            },\n        ],\n    ],\n    validate: async (runtime: IAgentRuntime) => {\n        await validateElfaAiConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const baseUrl = runtime.getSetting(\"ELFA_AI_BASE_URL\");\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"x-elfa-api-key\": runtime.getSetting(\"ELFA_AI_API_KEY\"),\n            };\n            let updatedState: State;\n            if (!state) {\n                updatedState = (await runtime.composeState(message)) as State;\n            } else {\n                updatedState = await runtime.updateRecentMessageState(state);\n            }\n\n            const context = composeContext({\n                state: updatedState,\n                template: getTrendingTokensTemplate,\n            });\n\n            const content = (\n                await generateObject({\n                    runtime,\n                    context: context,\n                    modelClass: ModelClass.LARGE,\n                    schema: getTrendingTokensSchema,\n                    schemaName: \"getTrendingTokensSchema\",\n                    schemaDescription:\n                        \"Schema for getting trending tokens based on mentions from Elfa AI API\",\n                })\n            ).object as GetTrendingTokensContent;\n\n            if (!isGetTrendingTokensContent(content)) {\n                callback?.({\n                    text: \"Unable to process get trending tokens request. Invalid content provided.\",\n                    content: { error: \"Invalid get trending tokens content\" },\n                });\n                return false;\n            }\n            const {\n                timeWindow = \"24h\",\n                page = 1,\n                pageSize = 50,\n                minMentions = 5,\n            } = content;\n            const response = await axios.get(`${baseUrl}/v1/trending-tokens`, {\n                headers,\n                params: { timeWindow, page, pageSize, minMentions },\n            });\n            const responseData = response.data;\n\n            const prompt = `Extracted information and summarize the trending tokens by twitter mentions from the Elfa AI API.:\n            ${JSON.stringify(responseData, null, 2)}`;\n\n            const callbackMessage = await generateText({\n                runtime: runtime,\n                context: prompt,\n                modelClass: ModelClass.LARGE,\n            });\n            callback?.({\n                text: `Retrieves trending tokens by twitter mentions from the Elfa AI API:\n${callbackMessage}\n------------------------------------------------\nRaw Response: \n${JSON.stringify(responseData, null, 2)}`,\n                action: \"ELFA_GET_TRENDING_TOKENS\",\n            });\n            return true;\n        } catch (error) {\n            callback?.({\n                text: `Failed to get trending tokens from Elfa AI API.\nError:\n${error.message}`,\n                action: \"ELFA_GET_TRENDING_TOKENS\",\n            });\n            return false;\n        }\n    },\n};\n","import {\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n    type Content,\n    ModelClass,\n    composeContext,\n    generateObject,\n    generateText,\n} from \"@elizaos/core\";\nimport { validateElfaAiConfig } from \"../environment\";\nimport axios from \"axios\";\nimport { z } from \"zod\";\n\nexport const getTwitterAccountStatsSchema = z.object({\n    username: z.string().min(1),\n});\n\nexport interface getTwitterAccountStatsContent extends Content {\n    username: string;\n}\n\nconst getTwitterAccountStatsTemplate = `Respond with a JSON object containing only the extracted information:\n\nExample response:\n\\`\\`\\`json\n{\n    \"username\": \"elonmusk\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information for the requested Twitter account smart stats:\n- username: Twitter username to retrieve smart account stats for.\n\nRespond with a JSON object containing only the extracted information\n`;\n\nexport function isGetTwitterAccountStatsContent(\n    content: getTwitterAccountStatsContent\n): content is getTwitterAccountStatsContent {\n    return typeof content.username === \"string\";\n}\n\nexport const elfaGetTwitterAccountStatsAction: Action = {\n    name: \"ELFA_TWITTER_ACCOUNT_STATS\",\n    similes: [\n        \"account smart stats\",\n        \"smart stats\",\n        \"twitter account stats\",\n        \"smart twitter stats\",\n    ],\n    description:\n        \"Retrieves smart stats and social metrics for a specified Twitter account from the Elfa AI API.\",\n    examples: [\n        [\n            {\n                user: \"{{user}}\",\n                content: {\n                    text: \"get smart stats for Twitter account\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Retrieved twitter account data completed successfully\",\n                    action: \"ELFA_TWITTER_ACCOUNT_STATS\",\n                },\n            },\n        ],\n    ],\n    validate: async (runtime: IAgentRuntime) => {\n        await validateElfaAiConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        try {\n            const baseUrl = runtime.getSetting(\"ELFA_AI_BASE_URL\");\n            const headers = {\n                \"Content-Type\": \"application/json\",\n                \"x-elfa-api-key\": runtime.getSetting(\"ELFA_AI_API_KEY\"),\n            };\n            let updatedState: State;\n            if (!state) {\n                updatedState = (await runtime.composeState(message)) as State;\n            } else {\n                updatedState = await runtime.updateRecentMessageState(state);\n            }\n\n            const context = composeContext({\n                state: updatedState,\n                template: getTwitterAccountStatsTemplate,\n            });\n\n            const content = (\n                await generateObject({\n                    runtime,\n                    context: context,\n                    modelClass: ModelClass.LARGE,\n                    schema: getTwitterAccountStatsSchema,\n                    schemaName: \"getTwitterAccountStatsSchema\",\n                    schemaDescription:\n                        \"Schema for retrieving smart twitter account stats for a specific username using the Elfa AI API\",\n                })\n            ).object as getTwitterAccountStatsContent;\n\n            if (!isGetTwitterAccountStatsContent(content)) {\n                callback?.({\n                    text: \"Unable to retieve twitter account stats for the provided username. Invalid content provided.\",\n                    content: {\n                        error: \"Invalid get twitter account stats content\",\n                    },\n                });\n                return false;\n            }\n            const { username } = content;\n            const response = await axios.get(\n                `${baseUrl}/v1/account/smart-stats`,\n                {\n                    headers,\n                    params: {\n                        username,\n                    },\n                }\n            );\n            const responseData = response.data;\n\n            const prompt = `Extracted information and summarize the smart account stats for provided username ${username}:\n            ${JSON.stringify(responseData, null, 2)}`;\n\n            const callbackMessage = await generateText({\n                runtime: runtime,\n                context: prompt,\n                modelClass: ModelClass.LARGE,\n            });\n            callback?.({\n                text: `Retrieved twitter account data for ${username} from the Elfa AI API:\n${callbackMessage}\n------------------------------------------------\nRaw Response: \n${JSON.stringify(responseData, null, 2)}`,\n                action: \"ELFA_TWITTER_ACCOUNT_STATS\",\n            });\n            return true;\n        } catch (error) {\n            callback?.({\n                text: `Failed to get twitter account data for the mentioned username from Elfa AI API.\nError:\n${error.message}`,\n                action: \"ELFA_TWITTER_ACCOUNT_STATS\",\n            });\n            return false;\n        }\n    },\n};\n","import { Plugin } from \"@elizaos/core\";\nimport { elfaPingAction } from \"./actions/ping\";\nimport { elfaApiKeyStatusAction } from \"./actions/apiKeyStatus\";\nimport { elfaGetSmartMentions } from \"./actions/getSmartMentions\";\nimport { elfaGetTopMentionsAction } from \"./actions/getTopMentions\";\nimport { elfaGetSearchMentionsByKeywordsAction } from \"./actions/getSearchMentionsByKeywords\";\nimport { elfaGetTrendingTokens } from \"./actions/getTrendingTokens\";\nimport { elfaGetTwitterAccountStatsAction } from \"./actions/getTwitterAccountStats\";\n\nexport const elfaAiPlugin: Plugin = {\n    name: \"elfa-ai\",\n    description:\n        \"Integrates Elfa AI API into Eliza OS for social media analytics and insights.\",\n    actions: [\n        elfaPingAction,\n        elfaApiKeyStatusAction,\n        elfaGetSmartMentions,\n        elfaGetTopMentionsAction,\n        elfaGetSearchMentionsByKeywordsAction,\n        elfaGetTrendingTokens,\n        elfaGetTwitterAccountStatsAction,\n    ],\n};\n\nexport default elfaAiPlugin;\n"],"mappings":"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","names":["elizaLogger","axios","elizaLogger","axios","z","ModelClass","composeContext","generateObject","generateText","axios","z","composeContext","generateObject","ModelClass","generateText","ModelClass","composeContext","generateObject","generateText","axios","z","composeContext","generateObject","ModelClass","generateText","ModelClass","composeContext","generateObject","generateText","axios","z","composeContext","generateObject","ModelClass","generateText","ModelClass","composeContext","generateObject","generateText","axios","z","composeContext","generateObject","ModelClass","generateText"]}